//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eraser.Manager {
    using System;
    
    
    /// <summary>
    ///   Класс ресурса со строгой типизацией для поиска локализованных строк и т.д.
    /// </summary>
    // Этот класс создан автоматически классом StronglyTypedResourceBuilder
    // с помощью такого средства, как ResGen или Visual Studio.
    // Чтобы добавить или удалить член, измените файл .ResX и снова запустите ResGen
    // с параметром /str или перестройте свой проект VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Strings {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Strings() {
        }
        
        /// <summary>
        ///   Возвращает кэшированный экземпляр ResourceManager, использованный этим классом.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Eraser.Manager.Strings", typeof(Strings).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Перезаписывает свойство CurrentUICulture текущего потока для всех
        ///   обращений к ресурсу с помощью этого класса ресурса со строгой типизацией.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на , at {0}.
        /// </summary>
        internal static string @__at__0_ {
            get {
                return ResourceManager.GetString(", at {0}", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0}, .
        /// </summary>
        internal static string _0___ {
            get {
                return ResourceManager.GetString("{0}, ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на {0} and {1} other targets.
        /// </summary>
        internal static string _0__and__1__other_targets {
            get {
                return ResourceManager.GetString("{0} and {1} other targets", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на An invalid type was found when loading the task schedule.
        /// </summary>
        internal static string An_invalid_type_was_found_when_loading_the_task_schedule {
            get {
                return ResourceManager.GetString("An invalid type was found when loading the task schedule", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Every Friday, {0}.
        /// </summary>
        internal static string Every_Friday___0_ {
            get {
                return ResourceManager.GetString("Every Friday, {0}", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Every Monday, {0}.
        /// </summary>
        internal static string Every_Monday___0_ {
            get {
                return ResourceManager.GetString("Every Monday, {0}", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Every Saturday, {0}.
        /// </summary>
        internal static string Every_Saturday___0_ {
            get {
                return ResourceManager.GetString("Every Saturday, {0}", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Every Sunday, {0}.
        /// </summary>
        internal static string Every_Sunday___0_ {
            get {
                return ResourceManager.GetString("Every Sunday, {0}", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Every Thursday, {0}.
        /// </summary>
        internal static string Every_Thursday___0_ {
            get {
                return ResourceManager.GetString("Every Thursday, {0}", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Every Tuesday, {0}.
        /// </summary>
        internal static string Every_Tuesday___0_ {
            get {
                return ResourceManager.GetString("Every Tuesday, {0}", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Every Wednesday, {0}.
        /// </summary>
        internal static string Every_Wednesday___0_ {
            get {
                return ResourceManager.GetString("Every Wednesday, {0}", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Every weekday.
        /// </summary>
        internal static string Every_weekday {
            get {
                return ResourceManager.GetString("Every weekday", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на No suitable hash algorithms were found on this computer..
        /// </summary>
        internal static string No_suitable_hash_algorithms_were_found_on_this_computer_ {
            get {
                return ResourceManager.GetString("No suitable hash algorithms were found on this computer.", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на On day {0} of every {1} months.
        /// </summary>
        internal static string On_day__0__of_every__1__months {
            get {
                return ResourceManager.GetString("On day {0} of every {1} months", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на On day {0} of every month.
        /// </summary>
        internal static string On_day__0__of_every_month {
            get {
                return ResourceManager.GetString("On day {0} of every month", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Once every {0} days.
        /// </summary>
        internal static string Once_every__0__days {
            get {
                return ResourceManager.GetString("Once every {0} days", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на once every {0} week..
        /// </summary>
        internal static string once_every__0__week_ {
            get {
                return ResourceManager.GetString("once every {0} week.", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на once every {0} weeks..
        /// </summary>
        internal static string once_every__0__weeks_ {
            get {
                return ResourceManager.GetString("once every {0} weeks.", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Once every day.
        /// </summary>
        internal static string Once_every_day {
            get {
                return ResourceManager.GetString("Once every day", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на Running on restart.
        /// </summary>
        internal static string Running_on_restart {
            get {
                return ResourceManager.GetString("Running on restart", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The frequency of the recurrence should be greater than one.
        /// </summary>
        internal static string The_frequency_of_the_recurrence_should_be_greater_than_one {
            get {
                return ResourceManager.GetString("The frequency of the recurrence should be greater than one", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Ищет локализованную строку, похожую на The WeeklySchedule should have at least one day where the task should be run..
        /// </summary>
        internal static string The_WeeklySchedule_should_have_at_least_one_day_where_the_task_should_be_run_ {
            get {
                return ResourceManager.GetString("The WeeklySchedule should have at least one day where the task should be run.", resourceCulture);
            }
        }
    }
}
